import pandas as pd
import os.path as path

# ==============================================================================
# Configuration
# ==============================================================================
CONFIG = pd.read_csv('config.tsv', index_col=False, sep='\t')

REPORT_DIR = 'Reports'
FASTQ_DIR = 'FASTQs'
TRIM_DIR = 'Trimmed'
ALIGN_DIR = 'Aligned'
PEAK_DIR = 'Peaks'

SAMPLES = CONFIG["Sample"].tolist()
BWT2_IDX = "/mnt/work1/data/iGenomes/human/hg38/Sequences/WholeGenomeFasta/genome.fa"
READS = [1, 2]

# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        # FastQC reports
        expand(
            path.join(FASTQ_DIR, "{sample}_R{read}_fastqc.{ext}"),
            sample=SAMPLES, read=READS, ext=["html", "zip"]
        ),
        # Trimming reports
        expand(
            path.join(REPORT_DIR, "{sample}_R{read}.trimming_report.txt"),
            sample=SAMPLES, read=READS
        ),
        expand(
            path.join(TRIM_DIR, "{sample}_R{read}.trimmed.fastq.gz"),
            sample=SAMPLES, read=READS
        ),
        # Bowtie2 alignment output files
        expand(path.join(ALIGN_DIR, "{sample}.sorted.bam"), sample=SAMPLES),
        expand(path.join(ALIGN_DIR, "{sample}.sorted.bam.bai"), sample=SAMPLES),
        # Peaks called by MACS2
        expand(
            path.join(PEAK_DIR, "{sample}_peaks.narrowPeak.gz"),
            sample=SAMPLES
        ),


# ==============================================================================
# Rules
# ==============================================================================
rule fastqc:
    input:
        path.join(FASTQ_DIR, "{fastq}.fastq.gz")
    output:
        path.join({REPORT_DIR}, "{fastq}_fastqc.html"),
        path.join({REPORT_DIR}, "{fastq}_fastqc.zip")
    shell:
        "fastqc {input} -o {REPORT_DIR}"

rule trim_galore:
    input:
        path.join(FASTQ_DIR, "{sample}_R1.fastq.gz"),
        path.join(FASTQ_DIR, "{sample}_R2.fastq.gz")
    output:
        path.join(TRIM_DIR, "{sample}_R1_val_1.fq.gz"),
        path.join(TRIM_DIR, "{sample}_R2_val_2.fq.gz"),
        path.join(TRIM_DIR, "{sample}_R1.fastq.gz_trimming_report.txt"),
        path.join(TRIM_DIR, "{sample}_R2.fastq.gz_trimming_report.txt"),
        path.join(TRIM_DIR, "{sample}_R1_val_1_fastqc.html"),
        path.join(TRIM_DIR, "{sample}_R1_val_1_fastqc.zip"),
        path.join(TRIM_DIR, "{sample}_R2_val_2_fastqc.html"),
        path.join(TRIM_DIR, "{sample}_R2_val_2_fastqc.zip")
    params:
        "--gzip --paired -q 30 -o {TRIM_DIR} --fastqc_args '-o {TRIM_DIR}'"
    shell:
        "trim_galore {params} {input}"

rule rename_trim_galore:
    input:
        fq1 = path.join(TRIM_DIR, "{sample}_R1_val_1.fq.gz"),
        fq2 = path.join(TRIM_DIR, "{sample}_R2_val_2.fq.gz"),
        rp1 = path.join(TRIM_DIR, "{sample}_R1.fastq.gz_trimming_report.txt"),
        rp2 = path.join(TRIM_DIR, "{sample}_R2.fastq.gz_trimming_report.txt"),
        qc1 = path.join(TRIM_DIR, "{sample}_R1_val_1_fastqc.html"),
        qz1 = path.join(TRIM_DIR, "{sample}_R1_val_1_fastqc.zip"),
        qc2 = path.join(TRIM_DIR, "{sample}_R2_val_2_fastqc.html"),
        qz2 = path.join(TRIM_DIR, "{sample}_R2_val_2_fastqc.zip")
    output:
        fq1 = path.join(TRIM_DIR, "{sample}_R1.trimmed.fastq.gz"),
        fq2 = path.join(TRIM_DIR, "{sample}_R2.trimmed.fastq.gz"),
        rp1 = path.join(REPORT_DIR, "{sample}_R1.trimming_report.txt"),
        rp2 = path.join(REPORT_DIR, "{sample}_R2.trimming_report.txt"),
        qc1 = path.join(REPORT_DIR, "{sample}_R1.trimmed_fastqc.html"),
        qc2 = path.join(REPORT_DIR, "{sample}_R2.trimmed_fastqc.html"),
        qz1 = path.join(REPORT_DIR, "{sample}_R1.trimmed_fastqc.zip"),
        qz2 = path.join(REPORT_DIR, "{sample}_R2.trimmed_fastqc.zip")
    run:
        commands = [
            "mv {input.fq1} {output.fq1}",
            "mv {input.fq2} {output.fq2}",
            "mv {input.rp1} {output.rp1}",
            "mv {input.rp2} {output.rp2}",
            "mv {input.qc1} {output.qc1}",
            "mv {input.qc2} {output.qc2}",
            "mv {input.qz1} {output.qz1}",
            "mv {input.qz2} {output.qz2}"
        ]
        command_string = "; ".join(commands)
        shell(command_string)

rule align:
    input:
        path.join(TRIM_DIR, "{sample}_R1.trimmed.fastq.gz"),
        path.join(TRIM_DIR, "{sample}_R2.trimmed.fastq.gz")
    output:
        bam = protected(path.join(ALIGN_DIR, "{sample}.bam")),
        report = path.join(REPORT_DIR, "{sample}.alignment_report.txt")
    params:
        "-x {BWT2_IDX}"
    shell:
        "bowtie2 {params} -1 {input[0]} -2 {input[1]} 2> {output.report} | samtools view -bS - > {output.bam}"

rule callpeaks:
    input:
        path.join(ALIGN_DIR, '{sample}.tagAlign.gz')
    output:
        path.join(PEAKS_DIR, '{sample}_control_lambda.bdg'),
        temp(path.join(PEAKS_DIR, '{sample}_peaks.narrowPeak')),
        path.join(PEAKS_DIR, '{sample}_peaks.xls'),
        path.join(PEAKS_DIR, '{sample}_summits.bed'),
        path.join(PEAKS_DIR, '{sample}_treat_pileup.bdg')
    params:
        lambda wildcards:
            ' '.join([
                '-f BED',                           # output format
                '-g 2.7e9',                         # genome size
                '--keep-dup all',                   # keep duplicates
                '--outdir {}'.format(PEAKS_DIR),
                '-n {}'.format(wildcards.sample),
                '-B',                               # store fragment pileup in bedGraph
                '--nomodel',                        # bypass building shifting model
                '--shift -75',                      # enriching for cutting sites, see example on GitHub MACS
                '--extsize 150',
                '-q 0.01',                          # q-value filter
                '--call-summits'                    # identify the summit of each peak
            ])
    shell:
        'macs2 callpeak -t {input} {params}'

# ==============================================================================
# Tools
# ==============================================================================
rule sort:
    input:
        "{file}.bam"
    output:
        "{file}.sorted.bam",
        "{file}.sorted.bam.bai"
    params:
        "--tmpdir . -p"
    shell:
        "sambamba sort {params} {input} -o {output}"

rule dedup:
    input:
        "{file}.bam"
    output:
        "{file}.dedup.bam"
    params:
        "-r -p --tmpdir ."
    shell:
        "sambamba markdup {params} {input} {output}"

rule keep_quality_alignments:
    input:
        "{file}.bam"
    output:
        "{file}.filtered.bam"
    params:
        filter = " and ".join([
            "not (unmapped or mate_is_unmapped)"
            "proper_pair",
            "mapping_quality >= 10"
        ]),
        other = " ".join([
            "-f bam",
            "-p"
        ])
    shell:
        "sambamba view -F '{params.filter}' {params.other} -o {output} {input}"
